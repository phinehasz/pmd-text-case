<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
missing argument
        ]]></description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>9</expected-linenumbers>
        <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Foo {
	private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);

	public void call() {
		final String oneArg = "one argument";
		LOGGER.error("forget the arg {} and {}", oneArg);
	}
}
        ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
too many arguments
         ]]></description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>9</expected-linenumbers>
        <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Foo {
	private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
	private final String MESSAGE = "too many args {}";

	public void call() {
		LOGGER.error(MESSAGE, "arg1", "arg2");
	}
}
         ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
Logger without problems
        ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Foo {
	private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);

	public void call() {
		final String message = "expected {} argument";
		LOGGER.error(message, 1);
	}
}
        ]]></code>
    </test-code>
    <test-code>
         <description><![CDATA[
ignore the exception param
        ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Foo {
	private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);

	public void call() {
		LOGGER.error("params {} and {}", "arg1", "arg2", new IllegalStateException("Extra arg"));
	}
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Class cast exception with Method calls</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class MethodCallClassCastExceptionProblem {
    public void foo() {
        // a method call
        otherMethod();
    }

    private void otherMethod() {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Null pointer with VariableNameDeclaration / VariableDeclaratorId</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class NullPointerTypeProblem {
    public void foo() {
        java.util.StringTokenizer st = new java.util.StringTokenizer("a.b.c.d", ".");
        while (st.hasMoreTokens()) {
            System.out.println(st.nextToken());
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1509 [java] InvalidSlf4jMessageFormat NPE</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package my.test;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Test {

    private static final Logger log = LoggerFactory.getLogger(Test.class);

    public static void main(String[] args) {
        log.info("1" + "2");
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1500 [java] InvalidSlf4jMessageFormat: doesn't ignore exception param</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InvalidSlf4jExceptionTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(InvalidSlf4jExceptionTest.class);

    public void foo() {
        try {
            throw new RuntimeException();
        } catch (RuntimeException e) {
            try {
                LOGGER.error("Exception was thrown during conversion from tc model: {}.", jsonMarshaller.marshall(tcmport));
            } catch (IOException e1) {
                LOGGER.error("Problem to marshall to json tcImport: {}", tcsTripImport, e1);
            }
            throw e;
        }
    }
}
        ]]></code>
    </test-code>
</test-data>
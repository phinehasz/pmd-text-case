/* Generated By:JavaCC: Do not edit this line. MatlabParserConstants.java */
package net.sourceforge.pmd.lang.matlab.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MatlabParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SEMI = 10;
  /** RegularExpression Id. */
  int LPAREN = 11;
  /** RegularExpression Id. */
  int RPAREN = 12;
  /** RegularExpression Id. */
  int LBRACE = 13;
  /** RegularExpression Id. */
  int RBRACE = 14;
  /** RegularExpression Id. */
  int LSBRACE = 15;
  /** RegularExpression Id. */
  int RSBRACE = 16;
  /** RegularExpression Id. */
  int AT = 17;
  /** RegularExpression Id. */
  int DOT = 18;
  /** RegularExpression Id. */
  int COMMA = 19;
  /** RegularExpression Id. */
  int DOUBLE_EQ = 20;
  /** RegularExpression Id. */
  int LOG_OR = 21;
  /** RegularExpression Id. */
  int LOG_AND = 22;
  /** RegularExpression Id. */
  int LSTE = 23;
  /** RegularExpression Id. */
  int GRTE = 24;
  /** RegularExpression Id. */
  int NEQ = 25;
  /** RegularExpression Id. */
  int EL_TIMES = 26;
  /** RegularExpression Id. */
  int EL_LEFTDIV = 27;
  /** RegularExpression Id. */
  int EL_RIGHTDIV = 28;
  /** RegularExpression Id. */
  int EL_EXP = 29;
  /** RegularExpression Id. */
  int EL_CCT = 30;
  /** RegularExpression Id. */
  int EQ = 31;
  /** RegularExpression Id. */
  int BIN_OR = 32;
  /** RegularExpression Id. */
  int BIN_AND = 33;
  /** RegularExpression Id. */
  int LST = 34;
  /** RegularExpression Id. */
  int GRT = 35;
  /** RegularExpression Id. */
  int COLON = 36;
  /** RegularExpression Id. */
  int PLUS = 37;
  /** RegularExpression Id. */
  int MINUS = 38;
  /** RegularExpression Id. */
  int NEG = 39;
  /** RegularExpression Id. */
  int TIMES = 40;
  /** RegularExpression Id. */
  int LEFTDIV = 41;
  /** RegularExpression Id. */
  int RIGHTDIV = 42;
  /** RegularExpression Id. */
  int EXP = 43;
  /** RegularExpression Id. */
  int BREAK = 44;
  /** RegularExpression Id. */
  int CASE = 45;
  /** RegularExpression Id. */
  int CATCH = 46;
  /** RegularExpression Id. */
  int CONTINUE = 47;
  /** RegularExpression Id. */
  int ELSE = 48;
  /** RegularExpression Id. */
  int ELSEIF = 49;
  /** RegularExpression Id. */
  int END = 50;
  /** RegularExpression Id. */
  int FOR = 51;
  /** RegularExpression Id. */
  int FUNCTION = 52;
  /** RegularExpression Id. */
  int GLOBAL = 53;
  /** RegularExpression Id. */
  int IF = 54;
  /** RegularExpression Id. */
  int OTHERWISE = 55;
  /** RegularExpression Id. */
  int PERSISTENT = 56;
  /** RegularExpression Id. */
  int RETURN = 57;
  /** RegularExpression Id. */
  int SWITCH = 58;
  /** RegularExpression Id. */
  int TRY = 59;
  /** RegularExpression Id. */
  int VARARGIN = 60;
  /** RegularExpression Id. */
  int WHILE = 61;
  /** RegularExpression Id. */
  int CLEAR = 62;
  /** RegularExpression Id. */
  int ID = 63;
  /** RegularExpression Id. */
  int LETTER = 64;
  /** RegularExpression Id. */
  int INT = 65;
  /** RegularExpression Id. */
  int FLOAT = 66;
  /** RegularExpression Id. */
  int EXPONENT = 67;
  /** RegularExpression Id. */
  int DIGIT = 68;
  /** RegularExpression Id. */
  int STRING = 69;
  /** RegularExpression Id. */
  int ESC_SEQ = 70;
  /** RegularExpression Id. */
  int UNICODE_ESC = 71;
  /** RegularExpression Id. */
  int OCTAL_ESC = 72;
  /** RegularExpression Id. */
  int HEX_DIGIT = 73;
  /** RegularExpression Id. */
  int OCTAL_DIGIT = 74;
  /** RegularExpression Id. */
  int TR = 75;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int TRANSPOSE = 1;
  /** Lexical state. */
  int IN_COMMENT = 2;
  /** Lexical state. */
  int IN_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\\n\"",
    "\"\\n\"",
    "\"%{\"",
    "\"%\"",
    "\"%}\"",
    "\"\\n\"",
    "<token of kind 9>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\".\"",
    "\",\"",
    "\"==\"",
    "\"||\"",
    "\"&&\"",
    "\"<=\"",
    "\">=\"",
    "\"~=\"",
    "\".*\"",
    "\"./\"",
    "\".\\\\\"",
    "\".^\"",
    "\".\\\'\"",
    "\"=\"",
    "\"|\"",
    "\"&\"",
    "\"<\"",
    "\">\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"~\"",
    "\"*\"",
    "\"/\"",
    "\"\\\\\"",
    "\"^\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"continue\"",
    "\"else\"",
    "\"elseif\"",
    "\"end\"",
    "\"for\"",
    "\"function\"",
    "\"global\"",
    "\"if\"",
    "\"otherwise\"",
    "\"persistent\"",
    "\"return\"",
    "\"switch\"",
    "\"try\"",
    "\"varargin\"",
    "\"while\"",
    "\"clear\"",
    "<ID>",
    "<LETTER>",
    "<INT>",
    "<FLOAT>",
    "<EXPONENT>",
    "<DIGIT>",
    "<STRING>",
    "<ESC_SEQ>",
    "<UNICODE_ESC>",
    "<OCTAL_ESC>",
    "<HEX_DIGIT>",
    "<OCTAL_DIGIT>",
    "\"\\\'\"",
  };

}

/* Generated By:JavaCC: Do not edit this line. MatlabParserTokenManager.java */
package net.sourceforge.pmd.lang.matlab.ast;
import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.TokenMgrError;

/** Token Manager. */
public class MatlabParserTokenManager extends net.sourceforge.pmd.lang.ast.AbstractTokenManager implements MatlabParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800L) != 0L)
            return 33;
         if ((active0 & 0x7c040000L) != 0L)
            return 3;
         if ((active0 & 0x7ffff00000000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x40000000000000L) != 0L)
            return 1;
         if ((active0 & 0x7fbff00000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x80c000000000000L) != 0L)
            return 1;
         if ((active0 & 0x77b3f00000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x77b0d00000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x3200000000000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x17b2800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x6000500000000000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x1190800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x622000000000000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x1190800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x180000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x1010800000000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 37:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 38:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 39:
         return jjStartNfaWithStates_0(0, 75, 33);
      case 40:
         return jjStopAtPos(0, 11);
      case 41:
         return jjStopAtPos(0, 12);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 37);
      case 44:
         return jjStopAtPos(0, 19);
      case 45:
         return jjStopAtPos(0, 38);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x7c000000L);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 36);
      case 59:
         return jjStopAtPos(0, 10);
      case 60:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 61:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 62:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 64:
         return jjStopAtPos(0, 17);
      case 91:
         return jjStopAtPos(0, 15);
      case 92:
         return jjStopAtPos(0, 42);
      case 93:
         return jjStopAtPos(0, 16);
      case 94:
         return jjStopAtPos(0, 43);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000e00000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 123:
         return jjStopAtPos(0, 13);
      case 124:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 125:
         return jjStopAtPos(0, 14);
      case 126:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 38:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 39:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 42:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 47:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 92:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 94:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000600000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000000L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4023000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800100000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L);
      case 123:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 124:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200400000000000L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000100000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10400000000000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x82000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400800000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 1);
         break;
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x102800000000000L);
      case 107:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 1);
         break;
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x1280000000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 1);
         break;
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjstateSet[jjnewStateCnt++] = 7;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddStates(3, 7);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 9:
                  if (curChar != 39)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(3, 7);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar != 46)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjAddStates(8, 12);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if (curChar == 92)
                     jjAddStates(8, 12);
                  break;
               case 11:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 26:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7c040000L) != 0L)
            return 3;
         if ((active0 & 0x7ffff00000000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x40000000000000L) != 0L)
            return 1;
         if ((active0 & 0x7fbff00000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x80c000000000000L) != 0L)
            return 1;
         if ((active0 & 0x77b3f00000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x77b0d00000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x3200000000000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x17b2800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x6000500000000000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x1190800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x622000000000000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x1190800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x180000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x1010800000000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         return jjMoveStringLiteralDfa1_1(0x8L);
      case 32:
         return jjStopAtPos(0, 1);
      case 37:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_1(0x20L);
      case 38:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_1(0x400000L);
      case 39:
         return jjStopAtPos(0, 75);
      case 40:
         return jjStopAtPos(0, 11);
      case 41:
         return jjStopAtPos(0, 12);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 37);
      case 44:
         return jjStopAtPos(0, 19);
      case 45:
         return jjStopAtPos(0, 38);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_1(0x7c000000L);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 36);
      case 59:
         return jjStopAtPos(0, 10);
      case 60:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_1(0x800000L);
      case 61:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_1(0x100000L);
      case 62:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_1(0x1000000L);
      case 64:
         return jjStopAtPos(0, 17);
      case 91:
         return jjStopAtPos(0, 15);
      case 92:
         return jjStopAtPos(0, 42);
      case 93:
         return jjStopAtPos(0, 16);
      case 94:
         return jjStopAtPos(0, 43);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x4000e00000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x7000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x18000000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x80000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x100000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x400000000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x800000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x1000000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x2000000000000000L);
      case 123:
         return jjStopAtPos(0, 13);
      case 124:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_1(0x200000L);
      case 125:
         return jjStopAtPos(0, 14);
      case 126:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 38:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 39:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 42:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 47:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 92:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 94:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000600000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x300000000000000L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 54, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x4023000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x8800000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x800100000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000000L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000000L);
      case 123:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 124:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 50, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000100000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x10800000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 51, 1);
         return jjMoveStringLiteralDfa3_1(active0, 0x1100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x3200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x200400000000000L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 59, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x5000100000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x10400000000000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 45, 1);
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x82000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x400800000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 61, 1);
         break;
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 46, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x102800000000000L);
      case 107:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 44, 1);
         break;
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 62, 1);
         return jjMoveStringLiteralDfa5_1(active0, 0x1280000000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 49, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 58, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000000000000L);
      case 108:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 53, 1);
         break;
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 57, 1);
         return jjMoveStringLiteralDfa6_1(active0, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000000000L);
      case 119:
         return jjMoveStringLiteralDfa6_1(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x1080000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x10000000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 47, 1);
         return jjMoveStringLiteralDfa8_1(active0, 0x100000000000000L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 52, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 60, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_1(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 55, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 56, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddStates(19, 23);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddStates(19, 23);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar != 46)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 8);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_2(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   8, 9, 10, 22, 23, 24, 29, 30, 11, 16, 17, 18, 19, 5, 6, 27, 
   28, 31, 32, 8, 9, 10, 15, 16, 13, 14, 17, 18, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\73", "\50", "\51", 
"\173", "\175", "\133", "\135", "\100", "\56", "\54", "\75\75", "\174\174", "\46\46", 
"\74\75", "\76\75", "\176\75", "\56\52", "\56\57", "\56\134", "\56\136", "\56\47", 
"\75", "\174", "\46", "\74", "\76", "\72", "\53", "\55", "\176", "\52", "\57", 
"\134", "\136", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\157\156\164\151\156\165\145", "\145\154\163\145", "\145\154\163\145\151\146", "\145\156\144", 
"\146\157\162", "\146\165\156\143\164\151\157\156", "\147\154\157\142\141\154", "\151\146", 
"\157\164\150\145\162\167\151\163\145", "\160\145\162\163\151\163\164\145\156\164", "\162\145\164\165\162\156", 
"\163\167\151\164\143\150", "\164\162\171", "\166\141\162\141\162\147\151\156", "\167\150\151\154\145", 
"\143\154\145\141\162", null, null, null, null, null, null, null, null, null, null, null, null, "\47", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "TRANSPOSE",
   "IN_COMMENT",
   "IN_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 0, 0, 0, 0, 2, 3, 0, 0, -1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x826L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoMore = {
   0x200L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[33];
private final int[] jjstateSet = new int[66];
protected char curChar;
/** Constructor. */
public MatlabParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public MatlabParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 33; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
